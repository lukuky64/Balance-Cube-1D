


Ideas:
- Logging can cause delays. Use a circular buffer for data collection and perform batch writes to the SD card to minimise blocking times.
- Consider fusing IMU and optical/magnetic encoder data using a complementary or Kalman filter to improve angle estimation accuracy.
- Integrate low-power modes for non-critical tasks to maximise energy efficiency.



Issues:
- When disconnecting fro serial, the ESP goes into a non code state (this is normal) but the Red and Green LEDs get left HIGH




refreshStatusAll, we need to implement all the function used in this


For future:
- the inturrpt has been setup in IMU.cpp. It should be active HIGH but the library described it strangely. Also once inturrpt is HIGH, do we need to manually set it back to LOW?
- removed USBPD check from requirements for now
- need to implement timestamps into kalman fiter, the imu data has this associated with it
- fusing the encoder with IMU in estimator estimate function
- need to consider the orientation of the imu for estimator correct function
- logging to SD - would be good to define all logging stuff in one file (like header, names, etc) but this isn't as memory efficient
- need to create a target angle based on centre of mass (manual calibration)
- need to define torque limit in BLDC - getMaxTau()